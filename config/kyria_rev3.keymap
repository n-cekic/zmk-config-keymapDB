/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&led_strip {
    chain-length = <25>;
};

/ {
    combos {
        compatible = "zmk,combos";

        Lock {
            bindings = <&kp LG(L)>;
            key-positions = <40 49>;
            require-prior-idle-ms = <250>;
        };

        BT0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <30 43>;
            require-prior-idle-ms = <250>;
        };

        BT1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <31 44>;
            require-prior-idle-ms = <250>;
        };

        BT2 {
            bindings = <&bt BT_CLR>;
            key-positions = <32 45>;
            require-prior-idle-ms = <250>;
        };

        BTClear {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <33 46>;
            require-prior-idle-ms = <250>;
        };

        ParenthesisCOMBO {
            bindings = <&ParenthesisC>;
            key-positions = <7 9>;
            require-prior-idle-ms = <250>;
        };

        BracketCOMBO {
            bindings = <&BracketC>;
            key-positions = <21 19>;
            require-prior-idle-ms = <250>;
        };

        CurlyCOMBO {
            bindings = <&CurlyC>;
            key-positions = <37 35>;
            require-prior-idle-ms = <250>;
        };

        AngleCOMBO {
            bindings = <&AngleC>;
            key-positions = <36 37>;
            require-prior-idle-ms = <250>;
        };

        LParen {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <7 8>;
            require-prior-idle-ms = <250>;
        };

        RParen {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <8 9>;
            require-prior-idle-ms = <250>;
        };

        LBracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <20 19>;
            require-prior-idle-ms = <250>;
        };

        RBracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <20 21>;
            require-prior-idle-ms = <250>;
        };

        LCurly {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <36 35>;
            require-prior-idle-ms = <250>;
        };

        RCurly {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <36 37>;
            require-prior-idle-ms = <250>;
        };

        Grave {
            bindings = <&kp GRAVE>;
            key-positions = <0 12>;
            require-prior-idle-ms = <250>;
        };

        Exc {
            bindings = <&kp EXCLAMATION>;
            key-positions = <1 13>;
            require-prior-idle-ms = <250>;
        };

        At {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 14>;
            require-prior-idle-ms = <250>;
        };

        Hash {
            bindings = <&kp HASH>;
            key-positions = <15 3>;
            require-prior-idle-ms = <250>;
        };

        Dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
            require-prior-idle-ms = <250>;
        };

        Percent {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
            require-prior-idle-ms = <250>;
        };

        Caret {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
            require-prior-idle-ms = <250>;
        };

        Ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <7 19>;
            require-prior-idle-ms = <250>;
        };

        Asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <20 8>;
            require-prior-idle-ms = <250>;
        };

        HomeShiftEndCombo {
            bindings = <&HomeShiftEnd>;
            key-positions = <18 20>;
            require-prior-idle-ms = <250>;
        };

        PasteClip {
            bindings = <&kp LG(V)>;
            key-positions = <28 16>;
            require-prior-idle-ms = <250>;
        };

        Undo {
            bindings = <&kp LC(Z)>;
            key-positions = <25 26>;
            require-prior-idle-ms = <250>;
        };

        Cut {
            bindings = <&kp LC(X)>;
            key-positions = <26 27>;
            require-prior-idle-ms = <250>;
        };

        Copy {
            bindings = <&kp LC(C)>;
            key-positions = <27 28>;
            require-prior-idle-ms = <250>;
        };

        Paste {
            bindings = <&kp LC(V)>;
            key-positions = <28 29>;
            require-prior-idle-ms = <250>;
        };

        AsteriskSurroundCOMBO {
            bindings = <&AsteriskSurround>;
            key-positions = <19 18>;
            require-prior-idle-ms = <250>;
        };

        LBootLoader {
            bindings = <&bootloader>;
            key-positions = <41 42 43>;
            require-prior-idle-ms = <250>;
        };

        RBootLoader {
            bindings = <&bootloader>;
            key-positions = <47 46 48>;
            require-prior-idle-ms = <250>;
        };

        Underscore {
            bindings = <&kp UNDER>;
            key-positions = <9 21>;
            require-prior-idle-ms = <250>;
        };

        Minus {
            bindings = <&kp MINUS>;
            key-positions = <10 22>;
            require-prior-idle-ms = <250>;
        };

        cBackspace {
            bindings = <&kp RC(BACKSPACE)>;
            key-positions = <11 23>;
            require-prior-idle-ms = <250>;
        };
    };

    macros {
        ParenthesisC: Parentheses {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "PARENTHESES";
        };

        BracketC: BracketC {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "BRACKETC";
        };

        CurlyC: CurlyC {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LEFT_BRACKET) &kp LS(RIGHT_BRACKET) &kp LEFT>;
            label = "CURLYC";
        };

        AngleC: AngleC {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(COMMA) &kp LS(PERIOD) &kp LEFT>;
            label = "ANGLEC";
        };

        HomeShiftEnd: HomeShiftEnd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "HOMESHIFTEND";
        };

        AsteriskSurround: AsteriskSurround {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp ASTERISK &kp END &kp ASTRK>;
            label = "ASTERISKSURROUND";
        };
    };

    behaviors {
        LockScreen: LockScreen {
            compatible = "zmk,behavior-hold-tap";
            label = "LOCKSCREEN";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <800>;
            flavor = "tap-preferred";
        };

        DELsBACK: DELsBACK {
            compatible = "zmk,behavior-mod-morph";
            label = "DELSBACK";
            bindings = <&kp DELETE>, <&kp BACKSPACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    sensors {
        left_config { triggers-per-rotation = <36>; };

        right_config { triggers-per-rotation = <6>; };
    };

    keymap {
        compatible = "zmk,keymap";

        Alphas {
            bindings = <
&kp ESC  &kp Q       &kp W       &kp E             &kp R               &kp T                                                                     &kp Y              &kp U                &kp I                           &kp O            &kp P                &kp BACKSPACE
&kp TAB  &mt LGUI A  &mt LALT S  &mt LEFT_SHIFT D  &mt LEFT_CONTROL F  &kp G                                                                     &kp H              &mt RIGHT_CONTROL J  &mt RSHIFT K                    &mt RIGHT_ALT L  &mt RMETA SEMICOLON  &kp SQT
&mo 2    &kp Z       &kp X       &kp C             &kp V               &kp B             &DELsBACK             &kp ENTER  &kp CAPS  &tog 1       &kp N              &kp M                &kp COMMA                       &kp DOT          &mt BACKSLASH SLASH  &kp ENTER
                                 &kp PRINTSCREEN   &kp LEFT_ALT        &kp LEFT_CONTROL  &mt LEFT_SHIFT SPACE  &mo 1      &mo 2     &lt 1 SPACE  &kp RIGHT_CONTROL  &kp RWIN             &LockScreen LG(L) C_PLAY_PAUSE
            >;
        };

        NumLayer {
            bindings = <
&kp KP_NUMLOCK  &kp SLASH        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp MINUS                                             &kp SLASH        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp MINUS   &trans
&trans          &kp ASTERISK     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp PLUS                                              &kp ASTERISK     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp PLUS    &kp EQUAL
&trans          &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD  &kp BACKSPACE  &kp EQUAL  &trans  &trans  &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD  &trans
                                                  &trans           &trans           &trans      &trans         &trans     &trans  &trans  &trans           &trans           &trans
            >;
        };

        NavLayer {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &trans                                  &trans    &trans        &trans     &trans  &trans  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans                                  &kp HOME  &kp UP_ARROW  &kp END    &trans  &trans  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans  &trans  &trans  &trans  &trans  &kp LEFT  &kp DOWN      &kp RIGHT  &trans  &trans  &trans
                         &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans        &trans
            >;
        };
    };
};
